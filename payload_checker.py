#!/usr/bin/env python
import struct
import hashlib
import bz2
import sys

from argparse import ArgumentParser

try:
    import lzma
except ImportError:
    from backports import lzma

import update_metadata_pb2 as um

def u32(x): return struct.unpack('>I', x)[0]
def u64(x): return struct.unpack('>Q', x)[0]

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('filename', metavar='payload.bin', default='payload.bin')

    args = parser.parse_args()

    if len(sys.argv) == 1:
        parser.print_help()
        exit()

    p = open(args.filename, 'rb')

    magic = p.read(4)
    assert magic == b'CrAU'

    file_format_version = u64(p.read(8))
    assert file_format_version == 2

    manifest_size = u64(p.read(8))

    metadata_signature_size = 0

    if file_format_version > 1:
        metadata_signature_size = u32(p.read(4))

    manifest = p.read(manifest_size)
    metadata_signature = p.read(metadata_signature_size)

    data_offset = p.tell()

    dam = um.DeltaArchiveManifest()
    dam.ParseFromString(manifest)

    block_size = dam.block_size

    o = open('check.sh', 'w', newline='')
    o.write('#!/system/bin/sh\n\n')
    o.write('# This script is auto generated by payload_checker, code by sabpprook@xda-developers\n\n')
    o.write('block_size={0}\n'.format(block_size))
    o.write('slot=`getprop ro.boot.slot_suffix`\n')
    o.write('[ ! $(whoami) == "root" ] && echo Need su permission && exit 1\n')
    o.write('[ -e /sbin/.magisk/busybox/sha256sum ] && sha256=/sbin/.magisk/busybox/sha256sum || exit 1\n\n')

    o.write('verify() {\n')
    o.write('  echo "{0}"\n'.format(''.rjust(64, '=')))
    o.write('  partition=/dev/block/bootdevice/by-name/$1$slot\n')
    o.write('  eval size=\${$1[0]}; eval hash=\${$1[1]};\n')
    o.write('  [ ! -e $partition ] && echo $1$slot not found && return\n')
    o.write('  result=$(echo $(dd if=$partition bs=$block_size count=$(expr $size / $block_size) 2>/dev/null | $sha256) | cut -c1-64)\n')
    o.write('  [ $hash == $result ] && echo $1$slot is verified || echo $1$slot is corrupted\n')
    o.write('  echo "$hash\\n$result"\n')
    o.write('}\n\n')

    for part in dam.partitions: o.write('{0}=("{1}" "{2}")\n'.format(part.partition_name, part.new_partition_info.size, part.new_partition_info.hash.hex()))

    o.write('for i in ')
    for part in dam.partitions: o.write(part.partition_name + ' ')
    o.write('; do verify $i; done\n\n')

    o.write('# Pre-Patched\n')
    for part in dam.partitions: o.write('# {0} {1}\n'.format(part.old_partition_info.hash.hex(), part.partition_name))

    o.write('# Post-Patched\n')
    for part in dam.partitions: o.write('# {0} {1}\n'.format(part.new_partition_info.hash.hex(), part.partition_name))

    o.close()

    o = open('check.bat', 'w', newline='')
    o.write('@echo off\n')
    o.write('adb push check.sh /data/local/tmp/\n')
    o.write('adb shell "chmod 755 /data/local/tmp/check.sh"\n')
    o.write('adb shell su -c "sh /data/local/tmp/check.sh"\n')
    o.write('pause >nul 2>nul\n')
    o.close()

